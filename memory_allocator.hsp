#ifndef memory_allocator
#addition "id_manager.hsp"
#module memory_allocator

; #define DEBUG_ALLOCATOR

#const CLASS_NUM 5
#const FREELIST_THRESHOLD 32
#const DEFAULT_POOL_SIZE 180000000
#const MAX_DIV 25000 //総ブロック数
#const MAX_EXPAND_LIMIT 180000000

#const OFFSET_SENTINEL -1234567
#const MEM_SENTINEL_SIZE -9999999

#enum STATE_SENTINEL 0
#enum STATE_USED
#enum STATE_FREE

#deffunc init_memory_pool int size
	
	if size <= 0{
		sdim memory_pool, DEFAULT_POOL_SIZE
	}else{
		sdim memory_pool, size
	}
	
	dim offset, MAX_DIV //メモリプール上のオフセット
	dim mem_size, MAX_DIV //メモリのサイズ
	dim block_state, MAX_DIV //このブロックが空きかどうか
	dim back_mem_id, MAX_DIV　//前のブロックid
	dim next_mem_id, MAX_DIV　//次のブロックid

	dim next_free_list, MAX_DIV
	dim back_free_list, MAX_DIV
	
	dim mem_id_manager
	newmod mem_id_manager, id_manager, MAX_DIV	

	pre_sentinel = -1
	repeat CLASS_NUM
		sentinel(cnt) = get_new_id(mem_id_manager) //番兵用のIDを確保

		back_free_list(sentinel(cnt)) = pre_sentinel
		if cnt{
			next_free_list(pre_sentinel) = sentinel(cnt)
		}

		block_state(sentinel(cnt)) = STATE_SENTINEL
		back_mem_id(sentinel(cnt)) = -1
		next_mem_id(sentinel(cnt)) = -1
		offset(sentinel(cnt)) = OFFSET_SENTINEL
		mem_size(sentinel(cnt)) = MEM_SENTINEL_SIZE
		
		pre_sentinel = sentinel(cnt)
	loop
	
	next_free_list(sentinel(CLASS_NUM-1)) = -1


	//最後のブロック管理変数
	last_block_id = -1
	
	return

#defcfunc local get_class_index int size
	#ifdef DEBUG_ALLOCATOR
	if size < 0{
		logmes "ERROR！サイズがマイナスで呼ばれました。想定していない処理です\nコールスタックを確認して原因を特定してください\n" + pattern_flag + " : " + right + " : " + left
		stop
	}
	#endif
	if size <= 0: return 0
	return limit(logf(size)/logf(2) - 5, 0, CLASS_NUM - 1)
	
#defcfunc get_class_index_by_id int id
	return get_class_index(mem_size(id))
	
#deffunc debug_check_free_list_integrity

	//番兵単品検査（固定の情報がいじられていないか？）
	repeat CLASS_NUM
		if BLOCK_STATE(sentinel(cnt)) != STATE_SENTINEL: logmes "番兵が壊れてます": stop
		if back_mem_id(sentinel(cnt)) != -1: logmes "番兵が壊れています": stop
		if next_mem_id(sentinel(cnt)) != -1: logmes "番兵が壊れています": stop
		if offset(sentinel(cnt)) != OFFSET_SENTINEL: logmes "番兵が壊れています": stop
		if mem_size(sentinel(cnt)) != MEM_SENTINEL_SIZE: logmes "番兵が壊れています": stop
	loop

	dim id_check, get_max_id(mem_id_manager) + 1 //発行したIDの最大値分確保

	sentinel_count = 0
	start_point = sentinel(0)
	while start_point >= 0

		id_check(start_point)++
		if id_check(start_point) >= 2{
			logmes "重複登録を発見しました"
			stop
		}

		if next_free_list(start_point) >= 0 {
			if back_free_list(next_free_list(start_point)) != start_point {
				logmes "next→back が一致しません at ID=" + start_point
				stop
			}
		}
		if back_free_list(start_point) >= 0 {
			if next_free_list(back_free_list(start_point)) != start_point {
				logmes "back→next が一致しません at ID=" + start_point
				stop
			}
		}

		switch block_state(start_point)

		case STATE_FREE
			assert next_mem_id(start_point) >= 0
			assert block_state(next_mem_id(start_point)) == STATE_USED
		swbreak
		case STATE_SENTINEL
			sentinel_count++
		swbreak
		case STATE_USED
			logmes "使用中のブロックがフリーリストに入っています\n ブロック番号→" + start_point
			stop
		swbreak
		default
			logmes "不明なブロックがフリーリストに入っています\n ブロック番号→" + start_point + "\n ブロックタイプ→" + block_stat(start_point)
			stop
		swbreak
		swend
			
		start_point = next_free_list(start_point)
	wend

	if sentinel_count != CLASS_NUM{
		logmes "フリーリスト内の番兵の数が異常です\n expected = " + CLASS_NUM + "\n actual = " + sentinel_count
		stop
	}

	return
	
#deffunc remove_from_free_list int id, local class_id

	//フリーリストから削除する、それだけなので、全体の前後の結合は呼び出し元で行うこと。
	if block_state(id) != STATE_FREE {
		if block_state(id) == STATE_SENTINEL {
			logmes "番兵を削除しようとしました！！！"
		} else {
			logmes "使用中ブロックを削除しようとしました"
		}
		stop
	}

	link_free_list back_free_list(id), next_free_list(id)
	block_state(id) = STATE_USED
	return

	
#deffunc resize_free_block int id, int newsize

	//指定されたフリーブロックのサイズを変更する

	if block_state(id) != STATE_FREE{
		logmes "フリーブロックでないブロックです!!【resize_free_block】"
		return
	}
	
	_newclass = get_class_index(newsize)

	if get_class_index_by_id(id) == _newclass {
		//クラス変動なし
		mem_size(id) = newsize
		return
	}
	
	//削除して
	remove_from_free_list id

	//新たなサイズに更新して再登録
	mem_size(id) = newsize
	add_to_free_list id
	
	return
	
#deffunc add_to_free_list int id, local _class_

	_class_ = get_class_index(mem_size(id))

	class_top = sentinel( get_class_index(mem_size(id)) )

	//idを割り込ませる
	link_free_list id, next_free_list(class_top)
	link_free_list class_top, id

	block_state(id) = STATE_FREE

	;debug_check_free_list_integrity

	return
	
#defcfunc get_free_block int size

	//探して見つかったら取り出す
	//指定サイズのクラス以上の空きブロックを探すよ
	
	start_node = next_free_list(sentinel(get_class_index(size)))
	
	//検索開始、各クラスの番兵のサイズはマイナスなのでリストの最後までいける。

	while start_node >= 0 
		if mem_size(start_node) >= size{

			link_free_list back_free_list(start_node), next_free_list(start_node)

			block_state(start_node) = STATE_USED
			
			return start_node
		}
		start_node = next_free_list(start_node) 
	wend

	return -1
	
#deffunc shrink_block int target_id, int size

	//有効なブロックを指定サイズに縮小する(単純縮小なので内容が削られることもある)

	if block_state(target_id) != STATE_USED: return 1 
	if size <= 0: return 2
	if size > mem_size(target_id): return 3

	if last_block_id != target_id{

		next_block_id = next_mem_id(target_id)
	
		if block_state(next_block_id) == STATE_FREE{
			
			assert next_mem_id(next_block_id) >= 0

			//次のブロックがフリーなら、次のブロックのオフセットとサイズを変更。
			offset(next_block_id) = offset(target_id) + size
			resize_free_block next_block_id, offset(next_mem_id(next_block_id)) - offset(next_block_id)
			
		}else: if offset(next_block_id) - offset(target_id) - size > FREELIST_THRESHOLD{
	
			//新たな空き空間を作成
			new_free_id = get_new_id(mem_id_manager)
	
			link_blocks new_free_id, next_block_id
			link_blocks target_id, new_free_id
	
			offset(new_free_id) = offset(target_id) + size
			mem_size(new_free_id) = mem_size(target_id) - size
	
			//フリーリストに登録
			add_to_free_list new_free_id
			
		}
	}
	
	mem_size(target_id) = size
	
	return 0
	
#defcfunc get_new_block int size
	if size <= 0{
		logmes "サイズ０以下では確保できません! 【 get_new_block() 】"
		
		return -1
	}
	
	newid = get_free_block(size)
	
	if newid >= 0{
		shrink_block newid, size //必要な分だけにセット
		memset memory_pool,0, mem_size(newid), offset(newid) //get_new_blockなのでお掃除
		return newid
	}
	//以下新規発行

	//新たにIDを確保。一番右のブロック位置とそのサイズの先に新しいブロックを割り当てる
	newid = get_new_id(mem_id_manager)
	
	mem_size(newid) = size

	if last_block_id >= 0{
		offset(newid) = offset(last_block_id) + mem_size(last_block_id)
		next_mem_id(last_block_id) = newid
	}else{
		offset(newid) = 0
	}

	if offset(newid) + size > MAX_EXPAND_LIMIT{

		//ロールバック
		if last_block_id >= 0{
			next_mem_id(last_block_id) = -1
		}
		release_id mem_id_manager, newid
		
		logmes "メモリがとれなかったよ・・・【get_new_block()】"
		stop
		return -1
	}
	
	back_mem_id(newid) = last_block_id
	next_mem_id(newid) = -1
	block_state(newid) = STATE_USED

	last_block_id = newid

	memexpand memory_pool, offset(newid) + size
	memset memory_pool,0, mem_size(newid), offset(newid)
	
	return newid


#deffunc free_block int id

	//使用中のブロックを解放する。左右の領域を吸収して、フリーリストに返す。

	if is_id_alive(mem_id_manager, id) == 0: return 0
	if block_state(id) != STATE_USED: return 0//使用中ではないブロック
	
	prev_id = back_mem_id(id) //前のブロックid
	next_id = next_mem_id(id) //次のブロックid
	
	//フリーリストにlast_block_idを登録しない仕様を保証するためのロジック。
	if id == last_block_id{
		//last_block_idを解放する場合
		if prev_id >= 0{
			if block_state(prev_id) != STATE_USED{
				//左もフリー
				remove_from_free_list prev_id
				if back_mem_id(prev_id) >= 0{
					next_mem_id(back_mem_id(prev_id)) = -1
				}
				last_block_id = back_mem_id(prev_id)
				release_id mem_id_manager, prev_id
			}else{
				//左は使用中
				last_block_id = prev_id
				next_mem_id(prev_id) = -1
			}
		}else{
			//自分だけの時の処理
			last_block_id = -1
		}
		//共通処理
		release_id mem_id_manager, id
		return 1
	}

	assert next_id >= 0 

	pattern_flag = 0

	if prev_id >= 0 {
		if block_state(prev_id) == STATE_FREE{
			pattern_flag |= 1 ;左側がフリー
		}
	}else{
		//　左にブロックがなくても小断片化している可能性がある。　ブロックが左にないのであれば左端までを領域とすればよい。
		//（右端が変わらないように隙間を吸収）
		mem_size(id) += offset(id)
		offset(id) = 0
	}

	if block_state(next_id) == STATE_FREE{
		pattern_flag |= 2 ;右側がフリー
	}
		
	switch pattern_flag
	case 0 //どちらにも統合なし
		left = offset(id)
		right = offset(next_id)
		
		if prev_id >= 0: left = offset(prev_id) + mem_size(prev_id)
		
		offset(id) = left
		mem_size(id) = right - left
		
		if mem_size(id) > FREELIST_THRESHOLD{
			//フリーリストに登録
			add_to_free_list id
			
		}else{
			//小断片なので無視し、前後を連結する
			link_blocks prev_id, next_id
			release_id mem_id_manager, id //id返却
		}
	swbreak
				
	case 1 //左にのみ統合
		left = offset(prev_id)
		right = offset(next_id)
		//連結更新
		resize_free_block prev_id, right - left
		
		link_blocks prev_id, next_id

		release_id mem_id_manager, id //idは消失
	swbreak

	case 2 //右にのみ統合
		assert next_mem_id(next_id) >= 0 //フリーリストに登録されているから、さらに右がある。
		left = offset(id)
		right = offset(next_mem_id(next_id))
		if prev_id >= 0{
			left = offset(prev_id) + mem_size(prev_id)
		}
		
		resize_free_block next_id, right - left

		offset(next_id) = left
		//連結更新
		link_blocks prev_id, next_id
		

		release_id mem_id_manager, id //idは消失
	swbreak
	
	case 3 //左右に統合 -> prev_idに統一する
		assert next_mem_id(next_id) >= 0
		left = offset(prev_id)
		right = offset(next_mem_id(next_id))

		resize_free_block prev_id, right - left

		remove_from_free_list next_id //nextはフリーリストに存在するはずなので削除

		//連結更新
		link_blocks prev_id, next_mem_id(next_id)

		//消失idを返却
		release_id mem_id_manager, id
		release_id mem_id_manager, next_id
		swbreak
	swend

	#ifdef DEBUG_ALLOCATOR
	debug_check_link_integrity "free_block pattern_flag -> " + pattern_flag
	debug_check_free_list_integrity
	debug_check_memory_pool_integrity
	#endif
	
	return 1
	
#deffunc debug_check_link_integrity str lab

	list_count = get_block_count()

	if list_count == 0 {
		return 0
	}

	//開始点捜索

	count = 0; そもそものカウントチェック
	start_point = -1
	foreach_id mem_id_manager, vid
		if block_state(vid) == STATE_SENTINEL: continue //番兵スキップ
		if back_mem_id(vid) == -1{
			if start_point != -1 {
				logmes "[リンクチェック失敗] 開始点が複数見つかった：" + lab
				return 1
			}
			start_point = vid
		}
		count++
	foreach_end

	if count != list_count{
		logmes "カウントバグ"
		stop
	}

	if start_point == -1 {
		logmes "[リンクチェック失敗] 開始点が見つからない：" + lab
		return 1
	}

	//開始点から最後まで到達できるか、バックリンクと循環も含めてチェック
	count = 0
	__prev_id = -1
	
	while start_point != -1
		if back_mem_id(start_point) != __prev_id {
			logmes "[リンクチェック失敗] " + strf("%d > (%d=%d) < %d", __prev_id, start_point, back_mem_id(start_point), start_point) + "次の前がリンクしていません\n" + lab
			return 1
		}
		if count > list_count{
			logmes "[リンクチェック失敗] 循環検出: " + lab
			return 1
		}
		__prev_id = start_point
		start_point = next_mem_id(start_point)
		count++
	wend
	
	if count != list_count{
		logmes "[リンクチェック失敗] 使用中のブロック数とリンク数が一致しない：" + lab
		return 1
	}
	
	//管理している最後のブロックIDとリンクの最後のブロックIDが一致するか確認
	if __prev_id != last_block_id{
		logmes "[リンクチェック失敗] 最後のブロックが不正：" + lab
		return 1
	}
	
	return 0
	　
#deffunc debug_check_memory_pool_integrity
	if last_block_id == -1: return

	//右からチェック、ブロックがオーバーラップしたり、離れすぎていないか？
	start_point = last_block_id
	
	while start_point >= 0
	
		offset_point = offset(start_point)
		
		if offset_point < 0{
			logmes "オフセットが範囲外です（マイナス）"
			stop
		}

		pre_point = start_point
		start_point = back_mem_id(start_point) //左のブロックに移動

		if start_point < 0{
			if offset_point > FREELIST_THRESHOLD{
				logmes "左端に行方不明空間があります"
				stop
			}
			_break
		}

		gap = (offset_point) - (offset(start_point) + mem_size(start_point))
		if gap < 0{
			logmes "領域がオーバーラップしています :: " + start_point + " <> " + pre_point + " ::\n"  + strf("(%d,%d) <-> (%d,%d)", offset(start_point), offset(start_point) + mem_size(start_point) , offset(pre_point), offset(pre_point) + mem_size(pre_point)) 
			stop
		}
		if gap > FREELIST_THRESHOLD{
			logmes "行方不明空間あり :: " + start_point + " <> " + pre_point + " ::\n"  + strf("(%d,%d) <-> (%d,%d)", offset(start_point), offset(start_point)+ mem_size(start_point) , offset(pre_point), offset(pre_point) + mem_size(pre_point)) 
			stop
		}
		
	wend
		
	return

#deffunc expand_block int oldid, int newsize
	/*
	ブロックの拡張を試みる。
	左右のブロックを確認し、拡張可能であれば拡張する。
	拡張できなかった場合は、左右の領域を吸収して、ブロックを移動する。
	*/
	if is_id_alive(mem_id_manager, oldid) == 0: return 0
	if block_state(oldid) != STATE_USED: return 0
	if newsize <= 0: return 0

	//自分が最後のブロックの場合
	if last_block_id == oldid {
		end_required = offset(oldid) + newsize
		if end_required > MAX_EXPAND_LIMIT {
			dialog strf("プール拡張限界を超えています！\n 拡張限界 = %d\n 試行サイズ = %d \n 要求サイズ = %d", MAX_EXPAND_LIMIT, end_required, newsize)
			end
			return 0
		}
		memexpand memory_pool, end_required 
		mem_size(oldid) = newsize
		return 1
	}

	offset_original = offset(oldid)
	size_original = mem_size(oldid)
	mem_size(oldid) = newsize //新しいサイズをセット

	if try_expand_right(oldid, newsize,offset_original, size_original): return 1
	if try_expand_left(oldid, newsize,offset_original, size_original): return 1
	
	return tryrelocate_block(oldid, newsize, offset_original, size_original)

#defcfunc try_expand_right int oldid, int newsize, int originaloffset, int originalsize

	//右拡張を試みる。不可能だった場合、フリーブロックの吸収だけ行う。
	
	nid = next_mem_id(oldid)
	if nid >= 0{
		if block_state(nid) == STATE_FREE{
			gap = offset(next_mem_id(nid)) - (originaloffset)
			if newsize <= gap{
				if gap <= FREELIST_THRESHOLD + newsize{
					remove_free_block nid
				}else{
					//右オフセット移動
					offset(nid) = originaloffset + newsize
					//右のサイズ変更
					resize_free_block nid, offset(next_mem_id(nid)) - offset(nid)
					assert mem_size(nid) > FREELIST_THRESHOLD

				}
				;debug_check_link_integrity "右側拡張成功 free"
				return 1
			}
			//右のフリーブロックを削除
			remove_free_block nid
		}else{
			if newsize <= offset(nid) - originaloffset{//右ブロックまでの隙間でOK
				;debug_check_link_integrity "右側拡張成功 used"
				return 1
			}
		}
	}
	return 0
#defcfunc try_expand_left int oldid, int newsize, int originaloffset, int originalsize

	//左拡張を試みる。不可能だった場合、フリーブロックの吸収だけ行う。

	//左側のチェック開始
	bid = back_mem_id(oldid)
	
	right = offset(next_mem_id(oldid))
	if bid >= 0{
		if block_state(bid) == STATE_FREE{
			gap = right - offset(bid)
			if newsize <= gap{//拡張可能
			
				//左の位置を自分のものにする
				offset(oldid) = offset(bid) 
				memcpy memory_pool, memory_pool, originalsize, offset(oldid), originaloffset

				if gap <= FREELIST_THRESHOLD + newsize{
					
					remove_free_block bid //左ブロックを削除

				}else{
					swap_adjacent_blocks oldid //隣接ブロックのリンクを入れ替え(指定IDとその左隣のブロックのリンクを入れ替える)

					//左ブロックのオフセットをIDブロックの右端にセット
					offset(bid) = offset(oldid) + newsize
					//左ブロックのサイズ変更
					resize_free_block bid, right - offset(bid)
					assert mem_size(bid) > FREELIST_THRESHOLD
					
				}
				
				;debug_check_link_integrity "左側拡張成功 free"
				return 1
			}
			
			remove_free_block bid
			
		}else{
			if newsize <= right - (offset(bid) + mem_size(bid)){ //左ブロックまでの隙間で収まる
			
				//オフセットを左に詰める
				offset(oldid) = offset(bid) + mem_size(bid)
				memcpy memory_pool, memory_pool, originalsize, offset(oldid), originaloffset
				
				;debug_check_link_integrity "左側拡張成功 used"
				return 1
			}
		}
	}
	
	return 0
	
#defcfunc tryrelocate_block int oldid, int newsize, int originaloffset, int originalsize
	/*	
	４と、空きスペース（９）を入れ替えるとき、
	
	1,2,3,(3,4,5),5,6,7,8,(8,9,10),10,11,11
					↓
	1,2,3,(3,9,5),5,6,7,8,(8,4,10),10,11,11

	このように組み替えればよい。

	この操作はメモリプール上には、一切影響を与えないため、メモリコピー操作は別次元で考えてよい。
	メモリ上のオフセットやサイズは単純なswap操作でOK

	完全に情報を交換した後、
	元居たリンク上の場所、つまり新しく確保したブロックIDを削除する。

	1,2,3,(3,9,5),5,6,7,8,(8,4,10),10,11,12
			↑９がフリーリストに入る。

	これで完了。

	last_block_id はリンクの最後を表す。
	oldid == last_blockだったとき、構造交換後はnewidがリンクの最後を表す。削除するので問題なし
	newid == last_blockのときは、構造交換後はlastblockはoldidになるため、変更が必要。
	
	*/

	assert next_mem_id(oldid) >= 0
	assert block_state(next_mem_id(oldid)) == STATE_USED
	
	//左の隙間計算
	if back_mem_id(oldid) >= 0{
		assert block_state(back_mem_id(oldid)) == STATE_USED 
		//左側のブロックがある場合
		offset(oldid) = offset(back_mem_id(oldid)) + mem_size(back_mem_id(oldid))
	}else{
		offset(oldid) = 0
	}
	
	mem_size(oldid) = offset(next_mem_id(oldid)) - offset(oldid) //右側のブロックまでのサイズをセット

	//移動可能ブロックを選択
	newid = get_free_block(newsize)
	
	if newid = -1{
		//新たなブロックを確保
		newid = get_new_block(newsize)
		if newid == -1{
			logmes "メモリブロック移動時に領域の確保に失敗しました -> " + newsize
			return 0
		}
		
		if last_block_id == newid{
			last_block_id = oldid
		}
		
	}else{
		assert mem_size(newid) >= newsize
		shrink_block newid, newsize
	}
	
	//構造交換
	bnewid = back_mem_id(newid)
	nnewid = next_mem_id(newid)
	boldid = back_mem_id(oldid)
	noldid = next_mem_id(oldid)
	back_mem_id(newid) = boldid: if boldid >= 0: next_mem_id(boldid) = newid
	next_mem_id(newid) = noldid: if noldid >= 0: back_mem_id(noldid) = newid
	back_mem_id(oldid) = bnewid: if bnewid >= 0: next_mem_id(bnewid) = oldid
	next_mem_id(oldid) = nnewid: if nnewid >= 0: back_mem_id(nnewid) = oldid

	//構造交換完了
	
	//それぞれのブロックの「内容」を復元
	memcpy memory_pool, memory_pool, originalsize, offset(newid), originaloffset
	swap offset(newid), offset(oldid)
	swap mem_size(newid), mem_size(oldid)
		
	free_block newid //解放

	return 1

#deffunc remove_free_block int target_id
    if is_id_alive(mem_id_manager, target_id) == 0: return 0 // 無効なID
    if block_state(target_id) != STATE_FREE: return 0 // フリーブロックのみ許可
    
    remove_from_free_list target_id // フリーリストから削除
    link_blocks back_mem_id(target_id), next_mem_id(target_id) // 前後のブロックをリンク
    release_id mem_id_manager, target_id// IDを返却
    
return 1 // 成功

#deffunc swap_adjacent_blocks int nowid
	// 指定されたIDのブロックとその左隣のブロックのリンクのみを入れ替える
	
	_prev_id = back_mem_id(nowid)
	_next_id = next_mem_id(nowid)
	
	link_blocks back_mem_id(_prev_id), nowid
	link_blocks nowid, _prev_id
	link_blocks _prev_id, _next_id
	
	return
	
#deffunc link_blocks int _prev_id_, int _next_id_
    if _prev_id_ >= 0: next_mem_id(_prev_id_) = _next_id_
    if _next_id_ >= 0: back_mem_id(_next_id_) = _prev_id_
	return
#deffunc link_free_list int _prev_id_, int _next_id_
    if _prev_id_ >= 0: next_free_list(_prev_id_) = _next_id_
    if _next_id_ >= 0: back_free_list(_next_id_) = _prev_id_
    return
	
///////////////////
//////可視化///////
///////////////////

#deffunc draw_memory_pool_with_labels int ysize, int yoffset, array chenged_ids, local sclass, local col, local ofs, local _size
	#const PIXEL 1
	redraw 2
	color 0,255,0 ; 使われておらず、フリーリストにも登録されていない
	boxf 0,yoffset, limit(get_memory_pool_size() * PIXEL,,ginfo(12)),yoffset+ysize
	
	foreach_id mem_id_manager, vid
	
		if block_state(vid) == STATE_SENTINEL: continue
		ofs = offset(vid)
		_size = mem_size(vid)
		sclass = get_class_index(_size)
		col = get_color_by_class(sclass)

		//領域描画
		
		//領域の色分け
		if block_state(vid) == STATE_USED{
			color $D3,$D3,$D3
		}else: if is_in_array(vid, changed_ids){
			color 255,200,0
		}else{
			color col>>16&255,col>>8&255,col&255
		}
		
		boxf ofs*PIXEL+1,yoffset, (ofs + _size)*PIXEL-1, yoffset+ysize

		color 0,0,0
		pos ofs*PIXEL+1,yoffset + ysize/3
		mes _size
		
		//文字列で使用中ならそれを可視化
		color 255,0,0
		使用量 = strlen(read_mem_str(vid))
		boxf ofs*PIXEL+1, yoffset+ysize - ysize/4, (ofs + 使用量)*PIXEL-1, yoffset+ysize - ysize/9

		//ブロックID
		color 0,0,0
		pos (ofs + 2 ) * PIXEL, yoffset + 2
		mes vid
		//クラス
		pos (ofs + 2 ) * PIXEL, yoffset + 2 + ysize/2
		mes sclass
		//両側の区切り線
		line ofs * PIXEL                 , yoffset, ofs*PIXEL, yoffset+ysize
		line (ofs + mem_size(vid)) * PIXEL, yoffset, (ofs+mem_size(vid)) * PIXEL,yoffset+ysize
		
	foreach_end
	redraw
	return
	
#defcfunc get_color_by_class int _class
	switch _class
	case 0 : return $ff6666
	case 1 : return $ff9933 
	case 2 : return $ffff66
	case 3 : return $66cc66 
	case 4 : return $3399ff 
	case 5 : return $6666ff 
	case 6 : return $cc66ff
	case 7 : return $ff66cc
	case 8 : return $33cc99
	case 9 : return $999999
	default: return $333333
	swbreak
	swend
return
#defcfunc is_in_array int _value, array a
	for i,, length(a)
		if a(i) == _value : return 1
	next
	return 0

////////////////////////
/////内部情報取得///////
////////////////////////

#defcfunc get_block_offset int id
	return offset(id)

#defcfunc get_block_size int id
    return mem_size(id)

//ブロックが操作可能かどうか
#defcfunc is_usable_block int id
	return block_state(id) == STATE_USED

//メモリプール上に存在するブロックの数（空き含む）
#defcfunc get_block_count
	return get_using_count(mem_id_manager) - CLASS_NUM

//発行した最大のID番号
#defcfunc get_block_max_id
	return get_max_id(mem_id_manager)

#defcfunc get_memory_pool_size
	return varsize(memory_pool)
	
#defcfunc get_memory_pool_size_max
	return MAX_EXPAND_LIMIT

///////////////////	
//////操作API//////
///////////////////

//文字列として操作
#deffunc write_mem_str int id, str value, int offset_in_block

	if block_state(id) != STATE_USED: return
	if offset_in_block < 0: return
	
	sz = strlen(value)
	vv = value
	if mem_size(id) < offset_in_block + sz{
		expand_block id, offset_in_block + sz
	}
	memcpy memory_pool, vv, sz, offset(id) + offset_in_block //sz分だけ書き込む
	return

#deffunc re_write_mem_str int id, str value

	if block_state(id) != STATE_USED: return
	
	sz = strlen(value)
	vv = value
	if mem_size(id) < sz{
		expand_block id, sz
	}
	memset memory_pool, 0, mem_size(id), offset(id)
	memcpy memory_pool, vv, sz, offset(id)
	return

#defcfunc read_mem_str int id, int offset_in_block
	if block_state(id) != STATE_USED: return ""
	if offset_in_block < 0: return ""
	if offset_in_block > mem_size(id): return ""

	copy_size = mem_size(id) - offset_in_block
	
	dupptr s, varptr(memory_pool) + offset(id) + offset_in_block, copy_size, 2
	return strmid(s, 0, copy_size) //文字列として切り出す
	
#deffunc append_str int id, str value
	write_mem_str id, read_mem_str(id) + value
	return
	
#deffunc insert_str int id, str value, int write_pos
	tmp = read_mem_str(id)
	write_mem_str id, strmid(tmp, 0, write_pos) + value + strmid(tmp, write_pos, $FFFFFFF)
	return

//バイナリ操作
#deffunc poke_block int id, var a, int offset_in_block

	if offset_in_block < 0: return
	if block_state(id) != STATE_USED: return

	v_size = varsize(a)
	required = offset_in_block + v_size
	if mem_size(id) < required {
		expand_block id, required
	}

	usable = mem_size(id) - offset_in_block
	memcpy memory_pool, a, limit(v_size,,usable), offset(id) + offset_in_block
	return
	
#deffunc peek_block int id, var a, int offset_in_block
	if block_state(id) != STATE_USED: return
	if offset_in_block < 0: return
	if offset_in_block > mem_size(id): return

	memcpy a, memory_pool, limit(mem_size(id) - offset_in_block,, varsize(a)), 0, offset(id) + offset_in_block
	return
	
#deffunc Lpoke_block int id, int p1, int offset_in_block

	if mem_size(id) < offset_in_block + 4 {
		expand_block id, offset_in_block + 4
	}
	
	lpoke memory_pool, offset(id) + offset_in_block, p1
	return

#deffunc copy_block int id, var a
	dupptr a, varptr(memory_pool) + offset(id), mem_size(id), 2
	return

#global
init_memory_pool

#ifndef swap
#module
#deffunc swap var a, var b
	tmp = a
	a = b
	b = tmp
	return
#global
#endif

#endif