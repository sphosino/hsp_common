#ifndef memory_allocator
#addition "id_manager.hsp"
#module memory_allocator

#const CLASS_NUM 10
#const FREELIST_THRESHOLD 4
#const DEFAULT_POOL_SIZE 10000
#const MAX_DIV 10000 //断片化許可数
#const MAX_EXPAND_LIMIT 4000000

#deffunc init_memory_pool int size
	

	if size <= 0{
		sdim memory_pool, DEFAULT_POOL_SIZE
	}else{
		sdim memory_pool, size
	}
	
	dim offset, MAX_DIV //メモリプール上のオフセット
	dim mem_size, MAX_DIV //メモリのサイズ
	dim is_free, MAX_DIV //このブロックが空きかどうか
	dim back_mem_id, MAX_DIV　//前のブロックid
	dim next_mem_id, MAX_DIV　//次のブロックid
	
	dim mem_id_manager
	newmod mem_id_manager, id_manager, MAX_DIV

	last_block_id = -1

	dim free_list    , CLASS_NUM, MAX_DIV
	dim free_list_num, CLASS_NUM
	
	return
	
#deffunc debug_check_free_list_integrity

	dim id_check, get_id_length(mem_id_manager) //発行したIDの最大値分確保
	
	repeat CLASS_NUM
		class = cnt
		repeat free_list_num(class)
		
			vvid = free_list(class, cnt)
			id_check(vvid)++
			
			if id_check(vvid) >= 2 {
				logmes "重複登録されたIDを検出: ID=" + vvid
				stop
			}
			
			assert next_mem_id(vvid) >= 0//有効
			assert is_free(next_mem_id(vvid)) == 0//且つ使用中
			
		loop
	loop
	return
	
#defcfunc get_free_block int size

	//探して見つかったら取り出す（フリーリストから消えます！！

	debug_check_free_list_integrity

	class = get_class_index(size)
	found_id = -1
	repeat CLASS_NUM - class, class
		for i,,free_list_num(cnt)
			if mem_size(free_list(cnt, i)) >= size{
				found_id = free_list(cnt, i)
				free_list_num(cnt)--
				is_free(found_id) == 0 ; 取り出したらすぐに使用中とする(フリーリストに存在しないから)
				for j,i,free_list_num(cnt)
					free_list(cnt,j) = free_list(cnt,j + 1)
				next
				break
			}
		next
	loop
	return found_id
	
#deffunc shrink_block int target_id, int size

	//指定サイズに縮小する(単純縮小なので内容が削られることもある)

	if is_id_alive(mem_id_manager, target_id) == 0: return 1
	if is_free(target_id): return 2
	
	if mem_size(target_id) - size > FREELIST_THRESHOLD{

		if last_block_id != target_id{
		
			//新たな空き空間を作成
			new_free_id = get_new_id(mem_id_manager)
	
			back_mem_id(new_free_id) = target_id //新ブロックの後ろを今のブロックに接続
			next_mem_id(new_free_id) = next_mem_id(target_id) //新ブロックの後ろを元のブロックの次につなげる
			back_mem_id(next_mem_id(target_id)) = new_free_id //元のブロックの次のブロックの後ろを新ブロックに接続
			next_mem_id(target_id) = new_free_id //元ブロックの右を新ブロックに接続
	
			offset(new_free_id) = offset(target_id) + size
			mem_size(new_free_id) = mem_size(target_id) - size
	
			//フリーリストに登録
			new_free_class = get_class_index_by_id(new_free_id)
			free_list(new_free_class, free_list_num(new_free_class)) = new_free_id
			free_list_num(new_free_class)++
			is_free(new_free_id) = 1
			
		}
		
	}else: if mem_size(target_id) <= size: return 3
	
	mem_size(target_id) = size
	
	return 0
	
#defcfunc get_new_block int size
	if size <= 0{
		logmes "サイズ０以下では確保できません! 【 get_new_block() 】"
		
		return -1
	}
	
	newid = get_free_block(size)
	
	if newid >= 0{

		shrink_block newid, size //必要な分だけにセット
		
		memset memory_pool,0, mem_size(newid), offset(newid) //get_new_blockなのでお掃除
		
		return newid
		
	}
	//以下新規発行

	//新たにIDを確保。一番右のブロック位置とそのサイズの先に新しいブロックを割り当てる
	newid = get_new_id(mem_id_manager)
	
	mem_size(newid) = size
	
	if last_block_id >= 0{
		offset(newid) = offset(last_block_id) + mem_size(last_block_id)
		next_mem_id(last_block_id) = newid
	}else{
		offset(newid) = 0
	}

	if offset(newid) + size > MAX_EXPAND_LIMIT{

		//ロールバック
		if last_block_id >= 0{
			next_mem_id(last_block_id) = -1
		}
		release_id mem_id_manager, newid
		
		logmes "メモリがとれなかったよ・・・【get_new_block()】"
		return -1
	}
	
	back_mem_id(newid) = last_block_id
	last_block_id = newid
	next_mem_id(newid) = -1

	is_free(newid) = 0
	
	memexpand memory_pool, offset(newid) + size
	memset memory_pool,0, mem_size(newid), offset(newid)
	return newid


	
#deffunc free_block int id
	if is_id_alive(mem_id_manager, id) == 0: return 0
	if is_free(id): return 0//既に開放済みのブロック
	
	prev_id = back_mem_id(id) //前のブロックid
	next_id = next_mem_id(id) //次のブロックid
	
	//フリーリストにlast_block_idを登録しない仕様を保証するためのロジック。
	if id == last_block_id{
		//last_block_idを解放する場合
		if prev_id >= 0{
			if is_free(prev_id){
				//左もフリー
				remove_from_free_list prev_id
				if back_mem_id(prev_id) >= 0{
					next_mem_id(back_mem_id(prev_id)) = -1
				}
				last_block_id = back_mem_id(prev_id)
				release_id mem_id_manager, prev_id
			}else{
				//左は使用中
				last_block_id = prev_id
				next_mem_id(prev_id) = -1
			}
		}else{
			//自分だけの時の処理
			last_block_id = -1
		}
		//共通処理
		release_id mem_id_manager, id
		return 1
	}

	assert next_id >= 0 //上のロジックで保証

	pattern_flag = 0

	if prev_id >= 0 {
		if is_free(prev_id){
			pattern_flag |= 1 ;左側がフリー
		}
	}else{
		//　左にブロックがなくても小断片化している可能性がある。　ブロックが左にないのであれば左端までを領域とすればよい。
		//（右端が変わらないように隙間を吸収）
		mem_size(id) += offset(id)
		offset(id) = 0
	}

	if is_free(next_id){
		pattern_flag |= 2 ;右側がフリー
	}
	debug_check_link_integrity "free_block pattern_flag -> " + pattern_flag

	switch pattern_flag
	case 0 //どちらにも統合なし
		left = offset(id)
		right = offset(next_id)
		
		if prev_id >= 0: left = offset(prev_id) + mem_size(prev_id)
		
		offset(id) = left
		mem_size(id) = right - left
		if mem_size(id) > FREELIST_THRESHOLD{
			//フリーリストに登録
			class = get_class_index(mem_size(id))
			free_list(class, free_list_num(class)) = id
			free_list_num(class)++
			is_free(id) = 1
			
		}else{
			//小断片なので無視し、前後を連結する
			link_blocks prev_id, next_id
			
			release_id mem_id_manager, id //id返却
		}
	swbreak
				
	case 1 //左にのみ統合
		left = offset(prev_id)
		right = offset(next_id)
		//連結更新
		resize_free_block prev_id, right - left
		
		link_blocks prev_id, next_id

		release_id mem_id_manager, id //idは消失
	swbreak
	
	case 2 //右にのみ統合
		assert next_mem_id(next_id) >= 0 //フリーリストに登録されているから、さらに右がある。
		left = offset(id)
		right = offset(next_mem_id(next_id))
		if prev_id >= 0{
			left = offset(prev_id) + mem_size(prev_id)
		}
		resize_free_block next_id, right - left
		
		//連結更新
		link_blocks prev_id, next_id
		
		offset(next_id) = left

		release_id mem_id_manager, id //idは消失
	swbreak
	
	case 3 //左右に統合 -> prev_idに統一する
		assert next_mem_id(next_id) >= 0
		left = offset(prev_id)
		right = offset(next_mem_id(next_id))

		resize_free_block prev_id, right - left

		//連結更新
		link_blocks prev_id, next_mem_id(next_id)
		
		remove_from_free_list next_id //nextはフリーリストに存在するはずなので削除

		//消失idを返却
		release_id mem_id_manager, id
		release_id mem_id_manager, next_id
	swbreak
	swend
	return 1
	
#deffunc resize_free_block int id, int newsize

	newclass = get_class_index(newsize)
	
	flag=""
	if get_class_index(mem_size(id)) != newclass {
		move_id_free_list id, newclass
		flag = " (クラス変更)"
	}
	mem_size(id) = newsize
	debug_check_link_integrity "resize_free_block" + flag
	
	return

#defcfunc local get_class_index int size
	#ifdef _debug
	if size < 0{
		logmes "ERROR！サイズがマイナスで呼ばれました。想定していない処理です\nコールスタックを確認して原因を特定してください" + pattern_flag + " : " + right + " : " + left
		stop
	}
	#endif
	if size <= 0: return 0
	return limit(logf(size)/logf(2) - 2, 0, CLASS_NUM - 1)
	
#defcfunc get_class_index_by_id int id
	return get_class_index(mem_size(id))

#deffunc remove_from_free_list int id

	debug_check_free_list_integrity

	class_id = get_class_index(mem_size(id))
	repeat free_list_num(class_id)
		if free_list(class_id, cnt) == id {
			free_list_num(class_id)--
			for i,cnt,free_list_num(class_id)
				free_list(class_id,i) = free_list(class_id, i + 1)
			next
			break
		}
	loop
	return

#deffunc move_id_free_list int id, int new_class

	remove_from_free_list id
	free_list(new_class, free_list_num(new_class)) = id
	free_list_num(new_class)++

	debug_check_free_list_integrity
	
	return
	


	
#deffunc debug_check_link_integrity str lab

	if get_using_count(mem_id_manager) == 0 {
		return 0
	}
	
	start_point = -1
	foreach_id mem_id_manager, vid
		if back_mem_id(vid) == -1 {
			if start_point != -1 {
				logmes "[リンクチェック失敗] 開始点が複数見つかった：" + lab
				return 1
			}
			start_point = vid
		} 
	foreach_end

	if start_point == -1 {
		logmes "[リンクチェック失敗] 開始点が見つからない：" + lab
		return 1
	}
	
	count = 0
	_prev_id = -1
	repeat get_using_count(mem_id_manager)
		if start_point < 0: break
		count++
		if start_point != start_point && back_mem_id(start_point) != _prev_id {
			logmes "[リンクチェック失敗] " + start_point + " の前のブロックが不正：" + lab
			return 1
		}
		_prev_id = start_point
		start_point = next_mem_id(start_point)
		if start_point >= 0{
			if back_mem_id(start_point) != _prev_id {
				logmes "[リンクチェック失敗] " + strf("%d > (%d=%d) < %d", _prev_id, start_point, back_mem_id(start_point), start_point) + "次の前がリンクしていません\n" + lab
				return 1
			}
		}
	loop
	
	//最後のブロックのチェック　(_prev_idは最後のブロックのID)
	if _prev_id < 0 {
		logmes "[リンクチェック失敗] 最後のブロックが不正：" + lab
		return 1
	}
	if count != get_using_count(mem_id_manager) {
		logmes "[リンクチェック失敗] 使用中のブロック数とリンク数が一致しない：" + lab
		return 1
	}
	//管理している最後のブロックIDとリンクの最後のブロックIDが一致するか確認
	if _prev_id != last_block_id {
		logmes "[リンクチェック失敗] 最後のブロックが不正：" + lab
		return 1
	}
	
	return 0

#defcfunc get_mem_offset int id
	return offset(id)
	
#defcfunc get_used_block_count

	total_ids = get_using_count(mem_id_manager) ; ← IDマネージャ全体の生存ID数
	free_count = 0
	repeat CLASS_NUM
		free_count += free_list_num(cnt)
	loop
	return total_ids - free_count
#defcfunc get_block_count
	return get_using_count(mem_id_manager)

#deffunc move_block int oldid, int newsize
	/*
	ブロックの拡張を試みる。
	左右のブロックを確認し、拡張可能であれば拡張する。
	拡張できなかった場合は、左右の領域を吸収して、ブロックを移動する。
	*/
	if is_id_alive(mem_id_manager, oldid) == 0: return 0
	if is_free(oldid) : return 0
	if newsize <= 0: return 0

	//自分が最後のブロックの場合
	if last_block_id == oldid {
		end_required = offset(oldid) + newsize
		if end_required > MAX_EXPAND_LIMIT {
			dialog strf("プール拡張限界を超えています！\n 拡張限界 = %d\n 試行サイズ = %d", MAX_EXPAND_LIMIT, end_required) 
			end //とりあえず強制終了
			return 0
		}
		memexpand memory_pool, end_required 
		mem_size(oldid) = newsize
		return 1
	}

	offset_original = offset(oldid)
	size_original = mem_size(oldid)
	mem_size(oldid) = newsize //新しいサイズをセット

	if try_expand_right(oldid, newsize,offset_original, size_original): return 1
	if try_expand_left(oldid, newsize,offset_original, size_original): return 1

return tryrelocate_block(oldid, newsize, offset_original, size_original)

#defcfunc try_expand_right int oldid, int newsize, int originaloffset, int originalsize

	//右拡張を試みる。不可能だった場合、フリーブロックの吸収だけ行う。
	
	debug_check_link_integrity "右拡張試行"
	nid = next_mem_id(oldid)
	if nid >= 0{
		if is_free(nid){
			if newsize <= offset(next_mem_id(nid)) - (originaloffset + newsize){
				if offset(next_mem_id(nid)) - (originaloffset + newsize)  <= FREELIST_THRESHOLD{
					remove_free_block nid
				}else{
					//右オフセット移動
					offset(nid) = originaloffset + newsize
					//右のサイズ変更
					resize_free_block nid, offset(next_mem_id(nid)) - offset(nid)

				}
				debug_check_link_integrity "右側拡張成功 free"
				return 1
			}
			//右のフリーブロックを削除
			remove_free_block nid
		}else{
			if newsize <= offset(nid) - originaloffset{//右ブロックまでの隙間でOK
				debug_check_link_integrity "右側拡張成功 used"
				return 1
			}
		}
	}
	return 0
#defcfunc try_expand_left int oldid, int newsize, int originaloffset, int originalsize

	//左拡張を試みる。不可能だった場合、フリーブロックの吸収だけ行う。

	debug_check_link_integrity "左拡張試行"

	right = offset(nid)

	//左側のチェック開始
	bid = back_mem_id(oldid)
	if bid >= 0{
		if is_free(bid){
			if newsize <= offset(nid) - offset(bid){//拡張可能
				//オフセットを左に詰める
				offset(oldid) = offset(bid)
				memcpy memory_pool, memory_pool, originalsize, offset(bid), originaloffset
				if right - (originaloffset + newsize) > FREELIST_THRESHOLD{

					swap_adjacent_blocks oldid //隣接ブロックのリンクを入れ替え(指定IDとその左隣のブロックのリンクを入れ替える)

					//左ブロックのオフセットをIDブロックの右端にセット
					offset(bid) = left_offset + newsize
					//左ブロックのサイズ変更
					resize_free_block bid, right - (originaloffset + newsize)

				}else{
					remove_free_block bid //左ブロックをフリーリストから削除
				}
				debug_check_link_integrity "左側拡張成功 free"
				return 1
			}else{
				remove_free_block bid
			}
		}else{
			if newsize <= right - (offset(bid) + mem_size(bid)){ //左ブロックまでの隙間で収まる
				//オフセットを左に詰める
				offset(oldid) = offset(bid) + mem_size(bid)
				//メモリコピー
				memcpy memory_pool, memory_pool, newsize, offset(oldid), originaloffset + originalsize
				debug_check_link_integrity "左側拡張成功 used"
				return 1
			}
		}
	}
	
	return 0
	
#defcfunc tryrelocate_block int oldid, int newsize, int originaloffset, int originalsize
	/*	
	４と、空きスペース（９）を入れ替えるとき、
	
	1,2,3,(3,4,5),5,6,7,8,(8,9,10),10,11,11
					↓
	1,2,3,(3,9,5),5,6,7,8,(8,4,10),10,11,11

	このように組み替えればよい。

	この操作はメモリプール上には、一切影響を与えないため、メモリコピー操作は別次元で考えてよい。
	メモリ上のオフセットやサイズは単純なswap操作でOK

	完全に情報を交換した後、
	元居たリンク上の場所、つまり新しく確保したブロックIDを削除する。

	1,2,3,(3,9,5),5,6,7,8,(8,4,10),10,11,12
			↑９がフリーリストに入る。

	これで完了。

	last_block_id はリンクの最後を表す。
	oldid == last_blockだったとき、構造交換後はnewidがリンクの最後を表す。削除するので問題なし
	newid == last_blockのときは、構造交換後はlastblockはoldidになるため、変更が必要。
	
	*/

	debug_check_link_integrity "move_block 移動前"
	
	//左の隙間計算
	if back_mem_id(oldid) >= 0{
		//左側のブロックがある場合
		offset(oldid) = offset(back_mem_id(oldid)) + mem_size(back_mem_id(oldid))
	}else{
		offset(oldid) = 0
	}
	
	mem_size(oldid) = offset(next_mem_id(oldid)) - offset(oldid) //右側のブロックまでのサイズをセット

	//移動可能ブロックを選択
	newid = get_free_block(newsize)
	
	if newid = -1{
		//新たなブロックを確保
		newid = get_new_block(newsize)
		if newid == -1{
			logmes "メモリブロック移動時に領域の確保に失敗しました -> " + newsize
			return 0
		}
		
		if last_block_id == newid{
			last_block_id = oldid
		}
		
	}else{
		shrink_block newid, newsize
	}
	
	//構造交換
	bnewid = back_mem_id(newid)
	nnewid = next_mem_id(newid)
	boldid = back_mem_id(oldid)
	noldid = next_mem_id(oldid)
	back_mem_id(newid) = boldid: if boldid >= 0: next_mem_id(boldid) = newid
	next_mem_id(newid) = noldid: if noldid >= 0: back_mem_id(noldid) = newid
	back_mem_id(oldid) = bnewid: if bnewid >= 0: next_mem_id(bnewid) = oldid
	next_mem_id(oldid) = nnewid: if nnewid >= 0: back_mem_id(nnewid) = oldid

	//構造交換完了

	//解放前のリンク構造チェック
	debug_check_link_integrity "move_block 解放前 "
	
	//それぞれのブロックの「内容」を復元
	memcpy memory_pool, memory_pool, originalsize, offset(newid), originaloffset
	swap offset(newid), offset(oldid)
	swap mem_size(newid), mem_size(oldid)

	assert mem_size(oldid) == newsize
		
	free_block newid //解放

	//解放後のリンク構造を確認
	debug_check_link_integrity "move_block 解放後"
	return 1

#deffunc remove_free_block int target_id
    if is_id_alive(mem_id_manager, target_id) == 0: return 0 // 無効なID
    if is_free(target_id) == 0: return 0 // 使用中ブロックの削除を許可しない
    debug_check_link_integrity "remove_free_block 実行前"
    remove_from_free_list target_id // フリーリストから削除
    link_blocks back_mem_id(target_id), next_mem_id(target_id) // 前後のブロックをリンク
    release_id mem_id_manager, target_id// IDを返却
    // 5. デバッグチェック
    debug_check_link_integrity "remove_free_block 実行後"
return 1 // 成功

#deffunc swap_adjacent_blocks int nowid
	// 指定されたIDのブロックとその左隣のブロックのリンクを入れ替える
	if is_id_alive(mem_id_manager, nowid) == 0: return ; IDが無効なら何もしない
	_prev_id = back_mem_id(nowid)
	if _prev_id < 0 : return ; 左隣がなければ何もしない
	debug_check_link_integrity "swap_adjacent_blocks 実行前"
	
	// つながり（リンク情報）のみ入れ替え
	_next_id = next_mem_id(nowid)
	link_blocks back_mem_id(_prev_id), nowid
	link_blocks nowid, _prev_id
	link_blocks _prev_id, _next_id

	// last_block_id の更新
	if last_block_id == nowid{
		last_block_id = _prev_id
	} 
	debug_check_link_integrity "swap_adjacent_blocks 実行後"
	return
#deffunc link_blocks int _prev_id_, int _next_id_
    if _prev_id_ >= 0: next_mem_id(_prev_id_) = _next_id_
    if _next_id_ >= 0: back_mem_id(_next_id_) = _prev_id_
	return
	
///////////////////
//////可視化///////
///////////////////

#deffunc draw_memory_pool_with_labels int ysize, int yoffset, array chenged_ids, local sclass, local col, local ofs, local _size
	#const PIXEL 1
	color 0,255,0 ; 使われておらず、フリーリストにも登録されていない
	boxf 0,yoffset,ginfo(12),yoffset+ysize
	
	foreach_id mem_id_manager, vid
		ofs = offset(vid)
		_size = mem_size(vid)
		sclass = get_class_index(_size)
		col = get_color_by_class(sclass)

		//領域描画
		
		//領域の色分け
		if is_free(vid){
			color $D3,$D3,$D3
		}else: if is_in_array(vid, changed_ids){
			color 255,200,0
		}else{
			color col>>16&255,col>>8&255,col&255
		}
		
		boxf ofs*PIXEL+1,yoffset, (ofs + _size)*PIXEL-1, yoffset+ysize
		
		//文字列で使用中ならそれを可視化
		color 255,0,0
		使用量 = strlen(read_mem_str(vid))
		boxf ofs*PIXEL+1, yoffset+ysize - ysize/4, (ofs + 使用量)*PIXEL-1, yoffset+ysize - ysize/9

		//ブロックID
		color 0,0,0
		pos (ofs + 2 ) * PIXEL, yoffset + 2
		mes vid
		//クラス
		pos (ofs + 2 ) * PIXEL, yoffset + 2 + ysize/2
		mes sclass
		//両側の区切り線
		line ofs * PIXEL                 , yoffset, ofs*PIXEL, yoffset+ysize
		line (ofs + mem_size(vid)) * PIXEL, yoffset, (ofs+mem_size(vid)) * PIXEL,yoffset+ysize
		
	foreach_end
	return
#defcfunc get_color_by_class int _class
	switch _class
	case 0 : return $ff6666
	case 1 : return $ff9933 
	case 2 : return $ffff66
	case 3 : return $66cc66 
	case 4 : return $3399ff 
	case 5 : return $6666ff 
	case 6 : return $cc66ff
	case 7 : return $ff66cc
	case 8 : return $33cc99
	case 9 : return $999999
	default: return $333333
	swbreak
	swend
return
#defcfunc is_in_array int _value, array a
	for i,, length(a)
		if a(i) == _value : return 1
	next
	return 0

////////////////////////
/////内部情報取得///////
////////////////////////

#defcfunc get_block_offset int id
	return offset(id)
#defcfunc get_block_size int id
    return mem_size(id)
    
#defcfunc get_memory_pool_size
	return varsize(memory_pool)
#defcfunc get_memory_pool_size_max
	return MAX_EXPAND_LIMIT


///////////////////	
//////操作API//////
///////////////////

//文字列として操作
#deffunc write_mem_str int id, str value, int offset_in_block
	if offseet_in_block < 0: return
	if is_id_alive(mem_id_manager, id) == 0: return
	if is_free(id): return
	
	sz = strlen(value)
	vv = value
	if mem_size(id) < offset_in_block + sz{
		debug_check_link_integrity "write_mem_str"
		move_block id, offset_in_block + sz
	}
	memcpy memory_pool, vv, sz, offset(id) + offset_in_block //sz分だけ書き込む
	return

#defcfunc read_mem_str int id, int offset_in_block
	if offset_in_block < 0: return ""
	if is_id_alive(mem_id_manager, id) == 0: return ""
	if is_free(id): return ""

	copy_size = mem_size(id) - offset_in_block
	if copy_size <= 0: return ""
	
	sdim s, mem_size(id)
	memcpy s, memory_pool, copy_size, 0, offset(id) + offset_in_block

	return strmid(s, 0, copy_size) //ごみを除く
	
#define global append_str(%1,%2 = "", %3 = -1) _append_str %1,%2,%3

#deffunc _append_str int id, str value, int offset_in_block
	if offset_in_block == -1{
		write_mem_str id, read_mem_str(id) + value
	}else{
		write_mem_str id, value, offset_in_block
	}
	return

//バイナリ操作
#deffunc poke_block int id, var a, int offset_in_block
	if offseet_in_block < 0: return
	if is_id_alive(mem_id_manager, id) == 0: return
	if is_free(id): return


	v_size = varsize(a)
	required = offset_in_block + size
	if mem_size(id) < required {
		move_block id, required
	}

	usable = mem_size(id) - offset_in_block
	memcpy memory_pool, a, limit(v_size,,usable), offset(id) + offset_in_block, 0
	return
	
#deffunc peek_block int id, var a, int offset_in_block
	if offseet_in_block < 0: return
	if is_id_alive(mem_id_manager, id) == 0: return
	if is_free(id): return

	memcpy a,memory_pool,limit(mem_size(a)-offset_in_block,,varsize(a)),0,offset(id) + offset_in_block
	return
	
#global
init_memory_pool

#module
#ifndef swap
#deffunc swap var a, var b
	tmp = a
	a = b
	b = tmp
	return
#endif
#global

#endif
