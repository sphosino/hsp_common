#include "../memory_allocator.hsp"
#include "nodmod/scrollbarmodule.hsp"
#addition "WrapCall.as"
screen 0,1900,1000,,0,0
randomize
mes "速度調整のスクロールバーです"
scbaOnScroll *sc　//動かすたびにジャンプするラベル

scbaScrollbar 0, 600,30
makeID = stat
scbaSetrange makeID, 1, 20 //1-20までの値
scbaSetPos makeID, 15
m1 = 15
scbaScrollbar 0,600,30
writeID = stat
scbaSetrange writeID, 1, 20
scbaSetPos writeID,15
m2 = 15
scbaScrollbar 0, 600, 30
delID = stat
scbaSetrange delID, 1, 20
scbaSetPos delID, 15
m3 = 15

randomize 123

init_memory_pool 200;プールサイズ自動拡張の確認のため小さく確保

repeat 
	title"作成準備中"
	draw_memory_pool_with_labels  100,150 * 1, idx
	await 2000/m1
	
	title"作成開始"
	dim idlist
	repeat 10
		
		size2 = 20 + rnd(30)
		t = get_new_block(size2)
		idlist(cnt) = t
		debug_check_link_integrity "作成後のリンク整合性チェック"
		if stat {
			draw_memory_pool_with_labels 100,150 * 1, idlist
			stop
		}
		draw_memory_pool_with_labels 100,150 * 1,idlist
		await 1000/m1
	loop

;/*
	// 一部を書き込みしてみる（右のスペースを使い無理なら左のスペースもみる。それでも無理なら、自動的に移動と解放が行われる。）
	title "書き込み準備中"
	draw_memory_pool_with_labels 100,150*2,idlist
	await 2000/m2
	
	title "書き込み開始"
	dim idx
	repeat 20
		
		idx(cnt) = idlist(rnd(length(idlist)))
		// 拡張を引き起こすように長い文字列を書く

		s = ""
		repeat 3 + rnd(3)
		s += "abcde"
		loop
		
		append_str idx(cnt), s
		debug_check_free_list_integrity
		debug_check_link_integrity "拡張後のリンク整合性チェック"
		
		if stat {
			draw_memory_pool_with_labels  100,150 * 2, idx
			stop
		}
		draw_memory_pool_with_labels  100,150 * 2, idx
		await 1000/m2
	loop
//*/

	title "削除準備中"
	draw_memory_pool_with_labels  100,150 * 3, idx
	await 2000/m3
	
	title "削除開始"
	dim idx
	count = 0
	in = 0
	c = get_block_max_id() + 1
	repeat 30
		
		idx(in) = rnd(c)
		free_block idx(in)
		count++
		if stat == 0:await: continue
		in++
		debug_check_link_integrity "解放後のリンク整合性チェック"
		if stat {
			draw_memory_pool_with_labels  100,150 * 3, idx
			stop
		}
		draw_memory_pool_with_labels  100,150 * 3, idx
		if count == 13 + rnd(10): break
		await 1000/m3
		
	loop
loop

*sc
	switch wparam
	case makeID
	m1 = lparam
	swbreak
	case writeID
	m2 = lparam
	swbreak
	case delID
	m3 = lparam
	swbreak
	swend
	return