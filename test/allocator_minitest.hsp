#include "../memory_allocator.hsp"
#undef mes
#define mes(%1 = "",%2=0) mes@hsp %1,%2:logmes %1

block = get_new_block(10)
write_mem_str block, "ABCDE", 0

mes "=== 境界チェックテスト ==="
mes "正常: " + read_mem_str(block, 0)    // "ABCDE"
mes "境界: " + read_mem_str(block, 5)    // ""
mes "範囲外: " + read_mem_str(block, 100)  // ""
mes "負値: " + read_mem_str(block, -1)    // ""

mes "=== 自動拡張テスト ==="
small_block = get_new_block(5)  // 小さく確保
mes "初期サイズ: " + get_block_size(small_block)

write_mem_str small_block, "これは確実に5バイトを超える長い文字列", 0
mes "拡張後サイズ: " + get_block_size(small_block)
mes "内容: " + read_mem_str(small_block, 0)

mes "=== append機能テスト ==="
append_block = get_new_block(20)
append_str append_block, "Hello"
mes "1回目: " + read_mem_str(append_block, 0)

append_str append_block, " "
append_str append_block, "World"
mes "追加後: " + read_mem_str(append_block, 0)

append_str append_block, "!!!"
mes "最終: " + read_mem_str(append_block, 0)

mes "=== オフセット書き込みテスト ==="
offset_block = get_new_block(20)
write_mem_str offset_block, "0123456789", 0
mes "初期: " + read_mem_str(offset_block, 0)

write_mem_str offset_block, "ABC", 3  // 途中に上書き
mes "上書き後: " + read_mem_str(offset_block, 0)  // "012ABC"になる？

append_str offset_block, "DEF",2

mes read_mem_str(offset_block)