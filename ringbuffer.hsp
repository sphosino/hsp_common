#ifndef ringbuffer
#module ringbuffer max_num, size, data, count, write_index, read_index
#define plus1(%1) %1 = (%1 + 1) \ max_num

#modinit int _size, int _max_num
	init_ringbuffer thismod, _size, _max_num
	return
	
#modfunc init_ringbuffer int _size, int _max_num
	max_num = limit(_max_num, 1)
	size = limit(_size, 64)
	sdim data, size, max_num
	reset_ringbuffer thismod
	return
	
#modfunc reset_ringbuffer
	write_index = 0
	read_index = 0
	count = 0
	return

#define data_push :\
	memcpy data(write_index), values, size:\
	plus1 write_index
	
#modfunc r_push var values, int no_resize

	if count == max_num{
		if no_resize{
			data_push
			plus1 read_index
		}else{
			resize thismod
			data_push
			count++
		}
	}else{
		data_push
		count++
	}

	return

#modfunc _r_shift var values //命令呼び出し用
#modcfunc r_shift var values //関数呼び出し用

	if count{
		count--
		memcpy values, data(read_index), size
		plus1 read_index
		return 1
	}
	
	return 0


#modfunc local resize
	
	sdim tmp, size, max_num

	old_count = count

	repeat old_count
		_r_shift thismod, tmp(cnt)
	loop

	max_num *= 2
	init_ringbuffer thismod, size, max_num

	repeat old_count
		memcpy data(write_index), tmp(cnt), size
		plus1 write_index
	loop
	count = old_count
	
	return

#modcfunc get_ringbuffer_count
	return count
#modcfunc get_ringbuffer_max_num
	return max_num
#modcfunc get_ringbuffer_size
	return size
#global
#endif


//以下テストコード
#if 0001
#ifdef _debug

#undef mes
#define mes(%1) mes@hsp %1: logmes %1

// テストコード
mes "--- リングバッファのテストを開始します ---"

// リングバッファのインスタンスを作成
newmod my_buffer , ringbuffer , 4, 3

mes "初期化後のバッファ状態:"
mes "最大数: " + get_ringbuffer_max_num(my_buffer)
mes "サイズ: " + get_ringbuffer_size(my_buffer)
mes "現在の要素数: " + get_ringbuffer_count(my_buffer)
mes "---"

// データをプッシュ
my_data = "Apple"
r_push my_buffer, my_data
my_data = "Banana"
r_push my_buffer, my_data
my_data = "Cherry"
r_push my_buffer, my_data
my_data = "Date"
r_push my_buffer, my_data

mes "4つのデータをプッシュしました。"
mes "現在の要素数: " + get_ringbuffer_count(my_buffer)
mes "---"

// リングバッファがいっぱいになったときの挙動をテスト
my_data = "Elderberry"
r_push my_buffer, my_data
mes "5つ目のデータをプッシュしました（リサイズされるはず）"
mes "現在の要素数: " + get_ringbuffer_count(my_buffer)
mes "新しい最大数: " + get_ringbuffer_max_num(my_buffer)
mes "---"

// データを取り出す
var_shift = ""
mes "データをシフトアウトします:"
repeat 5
	if r_shift(my_buffer, var_shift) {
		mes "取り出したデータ: " + var_shift
	} else {
		mes "バッファは空です。"
	}
loop
mes "---"

// 空になったバッファからのシフトをテスト
if r_shift(my_buffer, var_shift) {
	mes "追加でデータを取り出しました: " + var_shift
} else {
	mes "バッファは空です。"
}
mes "現在の要素数: " + get_ringbuffer_count(my_buffer)
mes "---"

mes "--- テストが完了しました ---"

#undef mes
#define global mes mes@hsp

#endif
#endif