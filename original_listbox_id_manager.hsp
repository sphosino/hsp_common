#ifndef listbox_id_manager
#addition "id_manager.hsp"
#module listbox_id_manager id_to_listnum, listnum_to_id, listnum, id_list_manager, len, filtered_ids, filtered_count, is_filtered, filtered_id_to_listnum, filtered_listnum_to_id, filtered_listnum
#const DEFAULT_SIZE 200
#const EXP_RATE 2.0
#define ctype ceil(%1) ((%1 > int(%1)) + %1)
#modinit int p1
	if p1 == 0{
		newmod id_list_manager, id_manager
		dim id_to_listnum, get_id_length(id_list_manager)
		dim listnum_to_id, get_id_length(id_list_manager)
	}else: if p1 < 0 {
		newmod id_list_manager, id_manager, DEFAULT_SIZE
		dim id_to_listnum, DEFAULT_SIZE
		dim listnum_to_id, DEFAULT_SIZE
	}else{
		newmod id_list_manager, id_manager, p1
		dim id_to_listnum, p1
		dim listnum_to_id, p1
	}
	len = get_id_length(id_list_manager)
	
	; フィルター用の変数を初期化
	dim filtered_ids, len
	filtered_count = 0
	is_filtered = 0
	dim filtered_id_to_listnum, len
	dim filtered_listnum_to_id, len
	filtered_listnum = 0
	return
	
#modcfunc get_new_listbox_id
	id = get_new_id(id_list_manager)
	
	if id >= len || listnum >= len{
		new_len = ceil(EXP_RATE * len)
		id_to_listnum(new_len - 1) = 0
		listnum_to_id(new_len - 1) = 0
		; フィルター配列もリサイズ
		filtered_ids(new_len - 1) = 0
		filtered_id_to_listnum(new_len - 1) = 0
		filtered_listnum_to_id(new_len - 1) = 0
		len = new_len
	}
    
	id_to_listnum(id) = listnum
	listnum_to_id(listnum) = id
	listnum++
	
	; フィルターが有効な場合は再構築
	if is_filtered {
		_rebuild_filtered_list thismod
	}
	return id
	
#modfunc delete_listbox_num int p1
	if p1 < 0 : return
	
	; フィルター状態に応じて処理を分岐
	if is_filtered {
		if p1 >= filtered_listnum : return
		id = filtered_listnum_to_id(p1)
	} else {
		if p1 >= listnum : return
		id = listnum_to_id(p1)
	}
	
	if is_id_alive(id_list_manager, id) {
		release_id id_list_manager, id
		
		; 元のリストから削除
		original_listnum = id_to_listnum(id)
		repeat listnum - original_listnum - 1, original_listnum
			listnum_to_id(cnt) = listnum_to_id(cnt + 1)
			id_to_listnum(listnum_to_id(cnt)) = cnt
		loop
		listnum--
		
		; フィルターが有効な場合は再構築
		if is_filtered {
			_rebuild_filtered_list thismod
		}
	}
	return

#modfunc delete_listbox_id int p1
	if is_id_alive(id_list_manager, p1){
		if is_filtered {
			; フィルター状態では filtered_id_to_listnum を使用
			filtered_num = _get_filtered_listnum(thismod, p1)
			if filtered_num >= 0 {
				delete_listbox_num thismod, filtered_num
			}
		} else {
			delete_listbox_num thismod, id_to_listnum(p1)
		}
	}
	return

#modfunc clear_listbox_id_manager
	clear_id_manager id_list_manager
	listnum = 0
	filtered_count = 0
	is_filtered = 0
	filtered_listnum = 0
	return

#modcfunc get_listbox_count
	if is_filtered {
		return filtered_listnum
	}
	return listnum

#modcfunc get_listbox_length
	return len

#modcfunc get_listbox_ids array a, int original
	if is_filtered && original == 0{
		if filtered_listnum > 0 {
			a(filtered_listnum - 1) = 0
			memcpy a, filtered_listnum_to_id, filtered_listnum << 2
		}
		return filtered_listnum
	} else {
		if listnum > 0 {
			a(listnum - 1) = 0
			memcpy a, listnum_to_id, listnum << 2
		}
		return listnum
	}
    
#modcfunc get_listbox_ids_range array a, int start_index, int end_index
	if start_index > end_index : return 0
	
	if is_filtered {
		start_idx = limit(start_index, 0, filtered_listnum - 1)
		end_idx = limit(end_index, 0, filtered_listnum - 1)
		n = end_idx - start_idx + 1
		if n > 0 {
			a(n - 1) = 0
			memcpy a, filtered_listnum_to_id, n << 2,, start_idx << 2
		}
		return n
	} else {
		start_idx = limit(start_index, 0, listnum - 1)
		end_idx = limit(end_index, 0, listnum - 1)
		n = end_idx - start_idx + 1
		if n > 0 {
			a(n - 1) = 0
			memcpy a, listnum_to_id, n << 2,, start_idx << 2
		}
		return n
	}
    
#modcfunc get_listbox_id int p1
	if is_filtered {
		if p1 < 0 || p1 >= filtered_listnum : return -1
		return filtered_listnum_to_id(p1)
	} else {
		if p1 < 0 || p1 >= listnum : return -1
		return listnum_to_id(p1)
	}
	
#modcfunc get_listbox_num int p1
	if is_id_alive(id_list_manager, p1) {
		if is_filtered {
			return _get_filtered_listnum(thismod, p1)
		} else {
			return id_to_listnum(p1)
		}
	}
	return -1

; フィルター機能
#modfunc listbox_filter_on array id_array, int _filtered_count
	; フィルター用IDリストを設定
	if _filtered_count < 0{
		filtered_count = length(id_array)
	}else{
		filtered_count = _filtered_count
	}
	if filtered_count > len {
		; 配列サイズが足りない場合は拡張
		new_len = filtered_count
		filtered_ids(new_len - 1) = 0
		filtered_id_to_listnum(new_len - 1) = 0
		filtered_listnum_to_id(new_len - 1) = 0
		len = new_len
	}
	
	memcpy filtered_ids, id_array, filtered_count << 2
	is_filtered = 1
	_rebuild_filtered_list thismod
	return

#modfunc listbox_filter_off
	is_filtered = 0
	filtered_count = 0
	filtered_listnum = 0
	return

; 内部関数：フィルターされたリストを再構築
#modfunc local _rebuild_filtered_list
	filtered_listnum = 0
	
	repeat filtered_count
		filter_id = filtered_ids(cnt)
		if is_id_alive(id_list_manager, filter_id) {
			filtered_id_to_listnum(filter_id) = filtered_listnum
			filtered_listnum_to_id(filtered_listnum) = filter_id
			filtered_listnum++
		}
	loop
	return

; 内部関数：フィルター状態でのlistnum取得
#modcfunc local _get_filtered_listnum int target_id
	for i,, filtered_listnum
		if filtered_listnum_to_id(i) == target_id {
			return i
		}
	next
	return -1

#global
#endif